// SPDX-FileCopyrightText: 2024 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System;
using System.Collections.Generic;
using System.Linq;
using Nethermind.Core;
using Nethermind.Int256;
using Nethermind.Merge.AuRa.Shutter;
using NUnit.Framework;
using Nethermind.Crypto;
using NSubstitute;
using Microsoft.AspNetCore.Builder;
using Google.Protobuf.WellKnownTypes;
using Nethermind.Api;

namespace Nethermind.Merge.AuRa.Test;

using G1 = Bls.P1;
using G2 = Bls.P2;
using GT = Bls.PT;
using EncryptedMessage = ShutterCrypto.EncryptedMessage;

class ShutterP2PTests
{
    // [Test]
    // public void Can_decode_decryption_keys()
    // {
    //     byte[] decryptionKeysEncoded = [0x0a, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0xc2, 0x01, 0x0a, 0x29, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x32, 0x70, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x94, 0x01, 0x08, 0x3c, 0x10, 0x01, 0x1a, 0x84, 0x01, 0x0a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc3, 0x16, 0x12, 0x40, 0x0c, 0x67, 0x8e, 0xd0, 0x05, 0x42, 0xd8, 0xb2, 0x50, 0x68, 0x2c, 0x85, 0xd2, 0x67, 0x9c, 0x63, 0x99, 0x50, 0x6f, 0x8d, 0x2b, 0xce, 0x78, 0x57, 0xac, 0x34, 0x0a, 0x8f, 0x12, 0xdc, 0xee, 0x1b, 0x2a, 0x81, 0x77, 0x24, 0x2e, 0xcf, 0x6d, 0xfd, 0x55, 0x8b, 0xda, 0x96, 0x51, 0x09, 0x3d, 0xd8, 0xda, 0x55, 0x77, 0x68, 0x56, 0x2e, 0xf6, 0xfc, 0xc2, 0xcd, 0x76, 0x8f, 0x87, 0xd6, 0xc4, 0xb2, 0x22, 0x07, 0x08, 0x96, 0x86, 0x83, 0x04, 0x10, 0x05];
    // }

    // [Test]
    // public void Can_get_decryption_keys()
    // {
    //     Shutter.Contracts.IKeyBroadcastContract keyBroadcastContract = Substitute.For<Shutter.Contracts.IKeyBroadcastContract>();
    //     keyBroadcastContract.GetEonKey(Arg.Any<BlockHeader>(), Arg.Any<ulong>()).Returns([]);

    //     Shutter.Contracts.IKeyperSetManagerContract keyperSetManagerContract = Substitute.For<Shutter.Contracts.IKeyperSetManagerContract>();

    //     INethermindApi api = Substitute.For<INethermindApi>();

    //     Action<Shutter.Dto.DecryptionKeys> onDecryptionKeysReceived = x => { };
    //     ShutterP2P shutterP2P = new(onDecryptionKeysReceived, keyBroadcastContract, keyperSetManagerContract, api);
    // }
}
