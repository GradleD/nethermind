// SPDX-FileCopyrightText: 2023 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System.Collections.Generic;
using Nethermind.Db;
using Nethermind.Db.Rocks.Config;
using Nethermind.Db.Rocks;
using Nethermind.Logging;
using Nethermind.TxPool;
using NUnit.Framework;
using System;
using MathNet.Numerics.Random;
using System.Threading.Tasks;
using Nethermind.Serialization.Rlp;
using Org.BouncyCastle.Utilities.Encoders;

namespace Nethermind.Merge.Plugin.Test;

[TestFixture]
[Parallelizable(ParallelScope.Self)]
public class ProcessedTransactionsDbCleanerTests
{

    [Test]
    public async Task should_remove_processed_txs_from_db_after_finalization()
    {
        var data = Hex.Decode("");
        var block = new BlockDecoder().Decode(new RlpStream(data));

        IColumnsDb<BlobTxsColumns> columnsDb = new ColumnsDb<BlobTxsColumns>("F:/db/x", StandardDbInitializer.BuildDbSettings(DbNames.BlobTransactions, () => { }, () => { }),
             new DbConfig()
             {
                 AdditionalRocksDbOptions = new Dictionary<string, string> { { "periodic_compaction_seconds", "5" }, { "disable_auto_compactions", "false" } },
             }, LimboLogs.Instance, new List<BlobTxsColumns>() { BlobTxsColumns.FullBlobTxs, BlobTxsColumns.LightBlobTxs, BlobTxsColumns.ProcessedTxs });
        BlobTxStorage blobTxStorage = new(columnsDb);


        var d = columnsDb.GetColumnDb(BlobTxsColumns.FullBlobTxs);
        var bytes = new Random().NextBytes(1024 * 1024 * 100);

        for (int i = 0; i < 10; i++)
        {
            var key = new byte[32];
            key[0] = (byte)i;
            d.Set(key, bytes, Core.WriteFlags.None);
        }

        d.Flush();
        for (int i = 0; i < 10; i++)
        {
            var key = new byte[32];
            key[0] = (byte)i;
            d.Remove(key);
        }

        blobTxStorage.AddBlobTransactionsFromBlock(blockOfTxs, txs);

        blobTxStorage.TryGetBlobTransactionsFromBlock(blockOfTxs, out Transaction[]? returnedTxs).Should().BeTrue();
        returnedTxs!.Length.Should().Be(2);

        IBlockFinalizationManager finalizationManager = Substitute.For<IBlockFinalizationManager>();
        ProcessedTransactionsDbCleaner dbCleaner = new(finalizationManager, columnsDb.GetColumnDb(BlobTxsColumns.ProcessedTxs), _logManager);

        finalizationManager.BlocksFinalized += Raise.EventWith(
            new FinalizeEventArgs(Build.A.BlockHeader.TestObject,
                Build.A.BlockHeader.WithNumber(finalizedBlock).TestObject));

        await dbCleaner.CleaningTask;

        blobTxStorage.TryGetBlobTransactionsFromBlock(blockOfTxs, out returnedTxs).Should().Be(blockOfTxs > finalizedBlock);
        d.Flush();
        await Task.Delay(100_000);
        d.Compact();
    }
}
