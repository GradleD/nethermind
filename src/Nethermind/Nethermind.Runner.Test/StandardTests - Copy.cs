// SPDX-FileCopyrightText: 2022 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using Nethermind.Config.Test;
using Nethermind.Core;
using Nethermind.Crypto;
using Nethermind.Merge.Plugin.Data;
using Nethermind.Serialization.Json;
using NUnit.Framework;
using System.Text.Json;

namespace Nethermind.Runner.Test
{
    [TestFixture]
    [Parallelizable(ParallelScope.All)]
    public class StandardTests2
    {
        [Test]
        public void All_json_rpc_methods_are_documented()
        {
            var json = @"{
       ""baseFeePerGas"": ""0x1"",
       ""blockHash"": ""0x9103fa70056a0be042f85a3bb7e0a0e72c63d541527fe49f33aea319eb8b0f63"",
       ""blockNumber"": ""0x6ba41"",
       ""extraData"": ""0x302e31382e302d64657600000000000000000000000000000000000000000000"",
       ""feeRecipient"": ""0x1670090000000000000000000000000000010001"",
       ""gasLimit"": ""0xe51ec90"",
       ""gasUsed"": ""0x0"",
       ""logsBloom"": ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"",
       ""parentHash"": ""0x17cfe19b789af91386d2f21460bcf97cdee6b35f17edf4d523db4dbe08bb8807"",
       ""prevRandao"": ""0x8839c6877eca092a07b965e5a85c132fc98022bc1c18f082840dcb7bddb771c6"",
       ""receiptsRoot"": ""0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"",
       ""stateRoot"": ""0xe3bdc85108b9d26b86d45b768c448c7db1cb29310862c4844e6c5c7a1a554d48"",
       ""timestamp"": ""0x668fcf04"",
       ""transactions"": [
         ""0x02f8ee83028c618306ba4680018303d09094167009000000000000000000000000000001000180b884da69d3dbe413f51312aaa6e01d1ceb4cc8bce4e9219996897d2604e78bcf8747640537691905487bf23990f8bcd981f9b9da0e583e47cf9688c807a1bad1ab6b822b51fd00000000000000000000000000000000000000000000000000000000001d17270000000000000000000000000000000000000000000000000000000000049e7dc080a079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798a03500ea8f1259301661a6c3ab687245d5975cb45fbc8ed1d523f4261737630ea7""
       ],
       ""withdrawals"": []
     }";
            var p = new EthereumJsonSerializer().Deserialize<ExecutionPayload>(json);
            Assert.IsTrue(p.TryGetBlock(out Block b));

            var d = b.Header.CalculateHash();

        }
        [Test]
        public void All_json_rpc_methods_are_documented2()
        {
            var json = @"{
       ""baseFeePerGas"": ""0x1"",
       ""blockHash"": ""0x9103fa70056a0be042f85a3bb7e0a0e72c63d541527fe49f33aea319eb8b0f63"",
       ""blockNumber"": ""0x6ba41"",
       ""extraData"": ""0x302e31382e302d64657600000000000000000000000000000000000000000000"",
       ""feeRecipient"": ""0x1670090000000000000000000000000000010001"",
       ""gasLimit"": ""0xe51ec90"",
       ""gasUsed"": ""0x0"",
       ""logsBloom"": ""0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"",
       ""parentHash"": ""0x17cfe19b789af91386d2f21460bcf97cdee6b35f17edf4d523db4dbe08bb8807"",
       ""prevRandao"": ""0x8839c6877eca092a07b965e5a85c132fc98022bc1c18f082840dcb7bddb771c6"",
       ""receiptsRoot"": ""0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"",
       ""stateRoot"": ""0xe3bdc85108b9d26b86d45b768c448c7db1cb29310862c4844e6c5c7a1a554d48"",
       ""timestamp"": ""0x668fcf04"",
       ""transactions"": [
         ""0x02f8ee83028c618306ba4680018303d09094167009000000000000000000000000000001000180b884da69d3dbe413f51312aaa6e01d1ceb4cc8bce4e9219996897d2604e78bcf8747640537691905487bf23990f8bcd981f9b9da0e583e47cf9688c807a1bad1ab6b822b51fd00000000000000000000000000000000000000000000000000000000001d17270000000000000000000000000000000000000000000000000000000000049e7dc080a079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798a03500ea8f1259301661a6c3ab687245d5975cb45fbc8ed1d523f4261737630ea7""
       ],
       ""txHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
       ""withdrawals"": [],
       ""withdrawalsHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000""
     }";
            var p = new EthereumJsonSerializer().Deserialize<ExecutionPayload>(json);
            Assert.IsTrue(p.TryGetBlock(out Block b));

            var d = b.Header.CalculateHash();

        }
    }
}
