name: Run Block Processing Benchmark

on:
  push:
    branches:
      - kch/block_processing_benchmark
  workflow_dispatch:
    inputs:
      branches_to_compare:
        description: "Branches to compare, separated by commas"
        required: true
        default: ""

jobs:
  check-artifacts:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        name: Generate Matrix based on provided branches and past results
        run: |
          branches=""
          if [ -z "$branches" ]; then
            branches="master,State-cache"
          fi
          IFS=',' read -ra branch_array <<< "$branches"
          
          matrix="{\"include\": ["
          first=true
          for branch in "${branch_array[@]}"; do
            # Remove refs/heads/ prefix from the branch name
            branch=$(echo "$branch" | sed 's/refs\/heads\///g' | xargs)
            if [ "$first" = true ] ; then
              first=false
            else
              matrix+=","
            fi
            matrix+="$( jq -n \
                        --arg branch "$branch" \
                        --argjson artifactExists false \
                        '{"branch":$branch, "artifactExists":$artifactExists}' )"
          done
          matrix+="]}"
          echo $matrix > matrix.json
          cat matrix.json
          echo "::set-output name=matrix::$(jq -c . matrix.json)"
          
  run-script:
    needs: [check-artifacts]
    runs-on: [self-hosted, LinuxAMD]
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.check-artifacts.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3
        with:
          clean: true
          ref: ${{ matrix.branch }}
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '7.0'
          
      - name: Configure settings
        id: settings
        run: |
          echo "BUILD_TIMESTAMP=$(date '+%s')" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=$(git describe --always --exclude=* --abbrev=40)" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build docker image
        run: docker buildx build --platform=linux/amd64 -t ${{ matrix.branch }} -f Dockerfile --build-arg COMMIT_HASH=${{ steps.settings.outputs.COMMIT_HASH }} --build-arg BUILD_TIMESTAMP=${{ steps.settings.outputs.BUILD_TIMESTAMP}} --load .

      - name: Build Kute
        run: dotnet build ./tools/Nethermind.Tools.Kute -c Release
      
      - name: Download Sedge
        run: |
          curl -LO https://github.com/NethermindEth/sedge/releases/download/v1.2.1/sedge-v1.2.1-linux-amd64
          chmod +x sedge-v1.2.1-linux-amd64
          mv sedge-v1.2.1-linux-amd64 sedge
      
      - name: Configure Sedge
        # env:
          # SEQ_API_KEY: ${{ secrets.SEQ_API_KEY }}
          # GRAFANA_CONNECTION_STRING: ${{ secrets.GRAFANA_CONNECTION_STRING }}
        run: |
          echo 'Generating sedge...'
          ./sedge deps install
          ./sedge generate --logging none \
          execution --map-all --network mainnet \
          -e nethermind:${{ matrix.branch }} \
          --el-extra-flag Sync.NonValidatorNode=true --el-extra-flag Sync.DownloadBodiesInFastSync=false \
          --el-extra-flag Sync.DownloadReceiptsInFastSync=false \
          --el-extra-flag JsonRpc.EnabledModules=[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Debug] \
          --el-extra-flag Network.MaxActivePeers=0 \
          --el-extra-flag JsonRpc.ReportIntervalSeconds=3600 
          # --el-extra-flag Metrics.Enabled=true
          # --el-extra-flag Metrics.NodeName=Core_BlockProcessingBenchmark_${{ github.ref }}
          # --el-extra-flag Seq.ServerUrl=https://seq.nethermind.io
          # --el-extra-flag Seq.ApiKey=${SEQ_API_KEY}
          # --el-extra-flag Seq.MinLevel=Info
          # --el-extra-flag Metrics.PushGatewayUrl=${GRAFANA_CONNECTION_STRING}
          echo 'Running sedge...'

      - name: Run Benchmark
        run: |
          #!/bin/bash

          # Define a function to stop the rsync process
          stop_rsync() {
              if [ -n "$rsyncPid" ]; then
                  echo "Stopping rsync process..."
                  kill $rsyncPid
                  scriptKilled=true
              fi
          }
          
          # Set a trap to call stop_rsync function if the script is interrupted
          trap stop_rsync INT TERM
          
          scriptKilled=false
          
          totalSize=$(du -sb /mnt/neth_backup/backup/mainnet | cut -f1)
          
          # echo "Stopping execution docker compose..."
          # docker compose -f ${{ github.workspace }}/sedge-data/docker-compose.yml stop execution
          
          # echo "Removing old mainnet data..."
          # dbCount=$(find ${{ github.workspace }}/sedge-data/execution-data/nethermind_db/mainnet -type f | wc -l)
          # # Check if there are any files
          # if [ $dbCount -gt 0 ]; then
          #   rm -r ${{ github.workspace }}/sedge-data/execution-data/nethermind_db/mainnet/*
          # fi
          
          echo "Changing to backup directory..."
          cd /mnt/neth_backup/backup/mainnet
          
          echo "Splitting file list..."
          fileCount=$(find . -type f -name "filelist.*" | wc -l)
          # Check if there are any files
          if [ $fileCount -gt 0 ]; then
              rm filelist.*
          fi
          
          find . -type f | split -d -l $(( $(find . -type f | wc -l) / 6 )) - filelist.part.
          
          echo "Starting parallel rsync..."
          ls filelist.part.* | parallel -j6 rsync --progress -aWvm --files-from={} . ${{ github.workspace }}/sedge-data/execution-data/nethermind_db/mainnet > /dev/null 2>&1 &
          
          rsyncPid=$!
          
          # Now we will enter a loop where we check the size of the destination directory
          # We will exit the loop once the size of the destination directory matches the size of the source directory
          while true; do
              sleep 10 # Sleep for a while to avoid excessive disk usage
              currentSize=$(du -sb ${{ github.workspace }}/sedge-data/execution-data/nethermind_db/mainnet | cut -f1)
          
              # Calculate the percentage of the total size that's been copied
              percentCopied=$(echo "scale=4; $currentSize * 100 / $totalSize" | bc)
              echo "Percentage copied: $percentCopied%"
          
              # Break the loop if rsync process is not running anymore
              if ! ps -p $rsyncPid > /dev/null; then
                  break
              fi
          done
          
          # Break the loop if the script was interrupted
          if $scriptKilled; then
              echo "Script was interrupted. Not proceeding with further iterations."
              exit 1
          fi
          
          echo "Starting execution docker compose..."
          docker compose -f ${{ github.workspace }}/sedge-data/docker-compose.yml up -d execution
          
          echo "Sleeping for 120 seconds..."
          sleep 120
          
          echo "Get Starting block and validate if correct..."
          curl --data '{"method":"eth_blockNumber","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" -X POST localhost:8545
          
          echo "Running Nethermind Tools Kute..."
          output=$(${{ github.workspace }}/tools/Nethermind.Tools.Kute/bin/Release/net7.0/Nethermind.Tools.Kute -i ${{ github.workspace }}/sedge-data/execution-data/logs/rpc/logs/filtered.txt -s ${{ github.workspace }}/sedge-data/jwtsecret) -o Json
          
          printf "%s\n" "$output"
          
          echo "Get Final block and validate if correct..."
          curl --data '{"method":"eth_blockNumber","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" -X POST localhost:8545
          
          echo "Script execution complete."
          
          # Clear the trap
          trap - INT TERM
          
      - name: Save Output from Kute
        run: |
          output_file="output.json"
          echo "$output" | jq '.' > "$output_file"
          echo "::set-output name=output_file::$output_file"
        id: save-output

      - name: Upload Output Artifact from Kute
        uses: actions/upload-artifact@v2
        with:
          name: blockPerformanceReport-${{ matrix.branch }}
          path: ${{ steps.save-output.outputs.output_file }}
